{
  "examples.starter.title": "실습",
  "examples.starter.description": "이제 배운 내용을 시도하는 연습을 해볼 차례입니다",

  "examples.finish.title": "실습 완료!",
  "examples.finish.description": " ",

  "steps.starter.title": "개요",
  "steps.starter.description": "RegEx는 `Regular Expression`의 줄임말입니다. 이것은 내용을 찾거나 관리하는 데 도움이 됩니다. RegEx 필드에 'OK'를 입력하여 첫 번째 단계를 진행하고 자세한 설명에 접근합니다...",

  "steps.whatIsRegex.title": "Regular Expressions, `RegEx`는 무슨 뜻일까?",
  "steps.whatIsRegex.description": "Regular Expressions 검색패턴을 표현하는 문자열입니다. 자주 `RegEx` 혹은 `RegExp`로 불립니다. 이것은 내용의 단어를 찾거나 대체하는데 용이합니다. 추가적으로, 내용이 우리가 설정한 규칙에 부합하는지 확인할 수 있습니다.\\n\\n 예를 들어, 파일이름들이 있다고 가정해봅시다. 이때 'pdf'형식의 파일만 찾고싶을때, 이 `^\\w+\\.pdf$` 표현을 입력하면 찾을 수 있을 것 입니다. 진행 단계가 거듭될수록 표현의 정의의 의미는 더 정확해질 것입니다.",

  "steps.basicMatchers.title": "기본 매칭",
  "steps.basicMatchers.description": "우리가 찾고자 하는 단어 내용을 직접 작성합니다. 이는 기본 검색 과정과 동일합니다. 예를 들어, 문단에 'curious'이라는 단어를 찾기 위해서 똑같이 작성하면 됩니다.",

  "steps.dotCharacter.title": "점 `.`: 아무 문자",
  "steps.dotCharacter.description": "이 `.`기호는 특수문자나 여백을 포함한 아무 문자를 구분합니다.",

  "steps.characterSet.title": "문자열 `[abc]`",
  "steps.characterSet.description": "한단어가 여러 문자열인 경우, 우리는 이를 모두 대괄호`[]`안에 작성합니다. 예를 들어, 문단 안에 있는 모든 단어를 작성하기 위해서, 대괄호 `[]` 안에 `a`, `e`, `i`, `o`, `u` 문자들을 작성합니다..",

  "steps.negatedCharacterSet.title": "문자열`[^abc]` 검색하기",
  "steps.negatedCharacterSet.description": "아래 문단에서 'ber'와 'bo'를 제외한 모든 단어를 찾으려면 대괄호 '[]' 안에 캐럿 '^' 문자 뒤에 'e'와 'o'를 나란히 입력하세요.",

  "steps.range.title": "문자 범위`[a-z]`",
  "steps.range.description": "지정된 범위의 글자를 찾으려면 시작 글자와 끝 글자를 대괄호 '[]' 사이에 대시 '-'로 작성하세요. 이는 대소문자를 구분합니다. 'e'와 'o' 사이의 모든 소문자를 선택하는 식을 입력합니다.",

  "steps.rangeNumber.title": "숫자 범위`[0-9]`",
  "steps.rangeNumber.description": "특정 범위내의 숫자를 찾기 위해서, 시작하는 숫자와 끝 숫자가 두 숫자 사이에`-`와 함께 `[]`안에 입력됩니다. 3,6을 포함한 그 사이의 숫자를 찾는 표현을 작성해보세요."

  "examples.basicMatchers.title": "실습: Basic Matcher",
  "examples.basicMatchers.description": "Write the expression that will select the words `of` in the text.",

  "examples.dotCharacter.title": "Practice: Any Character",
  "examples.dotCharacter.description": "Type the expression to select individual letters, numbers, spaces, and special characters in the text. The expression you type must match any character.",

  "examples.characterSet.title": "Practice: Character Sets",
  "examples.characterSet.description": "Write the phrase that matches each word in the text. The only characters that change are the initials of the words.",

  "examples.negatedCharacterSet.title": "Practice: Negated Character Sets",
  "examples.negatedCharacterSet.description": "Write down the expression that will match anything other than the words `beor` and `beur` in the text. Do this using the negated character set.",

  "examples.range.title": "Practice: Letter Range",
  "examples.range.description": "Write the expression that will select the letters from `g` to `k` in the text.\\n`g` and `k` letters should also be included in this range.",

  "examples.rangeNumber.title": "Practice: Number Range",
  "examples.rangeNumber.description": "Type an expression to select numbers from `2` to `7` in the text.\\n`2` and `7` should also be included in this range.",

  "steps.repetitions.title": "Repetitions",
  "steps.repetitions.description": "Some special characters are used to specify how many times a character will be repeated in the text. These special characters are the plus `+`, the asterisk `*`, and the question mark `?`.",

  "steps.asterisk.title": "Asterisk `*`",
  "steps.asterisk.description": "We put an asterisk `*` at the end to indicate that a character does not match at all or can match many times. For example, indicate that the letter `e` should never occur in the text, or it can occur once or more side by side.",

  "steps.plusCharacter.title": "Plus Sign `+`",
  "steps.plusCharacter.description": "To indicate that a character can occur one or more times, we put a plus sign `+` at the end. For example, indicate that the letter `e` can occur one or more times in the text.",

  "steps.questionMark.title": "Question Mark `?`",
  "steps.questionMark.description": "To indicate that a character is optional, we put a `?` question mark at the end. For example, indicate that the following letter `u` is optional.",

  "steps.quantifier.title": "Curly Braces - 1",
  "steps.quantifier.description": "To express a certain number of occurrences of a character, we write curly braces `{n}` along with how many times we want it to occur at the end. For example, indicate that the following letter `e` can occur only `2` times.",

  "steps.quantifierMin.title": "Curly Braces - 2",
  "steps.quantifierMin.description": "To express at least a certain number of occurrences of a character, we write the end of the character at least how many times we want it to occur, with a comma `,` at the end, and inside curly braces `{n, }`. For example, indicate that the following letter `e` can occur at least `3` times.",

  "steps.quantifierRange.title": "Curly Braces - 3",
  "steps.quantifierRange.description": "To express the occurrence of a character in a certain number range, we write curly braces `{x,y}` with the interval we want to go to the end. For example, indicate that the following letter `e` can only occur between `1` and `3`.",

  "examples.asterisk.title": "Practice: Asterisk `*`",
  "examples.asterisk.description": "Use the asterisk `*` to write the expression that will select each word, suitable for the absence of the letter `e` in the text and the presence of more than one.",

  "examples.plusCharacter.title": "Practice: Plus Sign `+`",
  "examples.plusCharacter.description": "Write the expression using the plus sign `+` to select words in which the letter `e` occurs one or more times in the text.",

  "examples.questionMark.title": "Practice: Question Mark `?`",
  "examples.questionMark.description": "Write the expression indicating that the letter `n` is optional in the text, using the question mark `?`. Thus, both the words `a` and `an` can be selected.",

  "examples.quantifier.title": "Practice: Curly Braces - 1",
  "examples.quantifier.description": "Write the expression using curly braces `{}` to select `4` digit numbers from `0` to `9` in the text.",

  "examples.quantifierMin.title": "Practice: Curly Braces - 2",
  "examples.quantifierMin.description": "Type the expression using curly braces `{}` to select numbers between `0` and `9` that occur at least `2` times in the text.",

  "examples.quantifierRange.title": "Practice: Curly Braces - 3",
  "examples.quantifierRange.description": "Write the expression using curly braces `{}` to select the numbers from `0` to `9` in the text that is at least between `1` and `4`.",

  "steps.groupping.title": "Parentheses `( )`: Grouping",
  "steps.groupping.description": "We can group an expression and use these groups to reference or enforce some rules. To group an expression, we enclose `()` in parentheses. For now just group `haa` below.",

  "steps.groupReference.title": "Referencing a Group",
  "steps.groupReference.description": "The words `ha` and `haa` are grouped below. The first group is used by writing `\\1` to avoid rewriting. Here `1` denotes the order of grouping. Type `\\2` at the end of the expression to refer to the second group.",

  "steps.nonCapturingGroupping.title": "Parentheses `(?: )`: Non-capturing Grouping",
  "steps.nonCapturingGroupping.description": "You can group an expression and ensure that it is not caught by references. For example, below are two groups. However, the first group reference we denote with `\\1` actually points to the second group, as the first is an uncaught group.",

  "steps.pipeCharacter.title": "Pipe Character `|`",
  "steps.pipeCharacter.description": "It allows to specify that an expression can be in different expressions. Thus, all possible statements are written separated by the pipe sign `|`. This differs from charset `[abc]`, charsets operate at the character level. Alternatives are at the expression level. For example, the following expression would select both `cat` and `Cat`. Add another pipe sign `|` to the end of the expression and type `rat` so that all words are selected.",

  "steps.escapeCharacter.title": "Escape Character `\\`",
  "steps.escapeCharacter.description": "There are special characters that we use when writing regex. `{ } [ ] / \\ + * . $^ | ?` Before we can select these characters themselves, we need to use an escape character `\\`. For example, to select the dot `.` and asterisk `*` characters in the text, let's add an escape character `\\` before it.",

  "steps.caret.title": "Caret Sign `^`:\\nSelecting by Line Start",
  "steps.caret.description": "We were using `[0-9]` to find numbers. To find only numbers at the beginning of a line, prefix this expression with the `^` sign.",

  "steps.dollar.title": "Dollar Sign `$`:\\nSelecting by End of Line",
  "steps.dollar.description": "Let's use the `$` sign after the `html` value to find the `html` texts only at the end of the line.",

  "steps.wordCharacter.title": "Word Character `\\w`: Letter, Number and Underscore",
  "steps.wordCharacter.description": "The expression `\\w` is used to find letters, numbers and underscore characters. Let's use the expression `\\w` to find word characters in the text.",

  "steps.withoutWordCharacter.title": "Except Word Character `\\W`",
  "steps.withoutWordCharacter.description": "The expression `\\W` is used to find characters other than letters, numbers, and underscores.",

  "steps.numberCharacter.title": "Number Character `\\d`",
  "steps.numberCharacter.description": "`\\d` is used to find only number characters.",

  "steps.withoutNumberCharacter.title": "Except Number Character `\\D`",
  "steps.withoutNumberCharacter.description": "`\\D` is used to find non-numeric characters.",

  "steps.spaceCharacter.title": "Space Character `\\s`",
  "steps.spaceCharacter.description": "`\\s` is used to find only space characters.",

  "steps.withoutSpaceCharacter.title": "Except Space Character `\\S`",
  "steps.withoutSpaceCharacter.description": "`\\S` is used to find non-space characters.",

  "steps.lookarounds.title": "Lookarounds",
  "steps.lookarounds.description": "If we want the phrase we're writing to come before or after another phrase, we need to \"lookaround\". Take the next step to learn how to \"lookaround\".",

  "steps.positiveLookahead.title": "Positive Lookahead: `(?=)`",
  "steps.positiveLookahead.description": "For example, we want to select the hour value in the text. Therefore, to select only the numerical values that have `PM` after them, we need to write the positive look-ahead expression `(?=)` after our expression. Include `PM` after the `=` sign inside the parentheses.",

  "steps.negativeLookahead.title": "Negative Lookahead: `(?!)`",
  "steps.negativeLookahead.description": "For example, we want to select numbers other than the hour value in the text. Therefore, we need to write the negative look-ahead `(?!)` expression after our expression to select only the numerical values that do not have `PM` after them. Include `PM` after the `!` sign inside the parentheses.",
  
  "steps.positiveLookbehind.title": "Positive Lookbehind: `(?<=)`",
  "steps.positiveLookbehind.description": "For example, we want to select the price value in the text. Therefore, to select only the number values that preceded by `$`, we need to write the positive lookbehind expression `(?<=)` before our expression. Add `\\$` after the `=` sign inside the brackets.",

  "steps.negativeLookbehind.title": "Negative Lookbehind: `(?&lt;!)`",
  "steps.negativeLookbehind.description": "For example, we want to select numbers in the text other than the price value. Therefore, to select only numeric values that do not preceded by `$`, we need to write the negative lookbehind `(?&lt;!)` before our expression. Add `\\$` after the `!` inside the brackets.",

  "steps.flags.title": "Flags",
  "steps.flags.description": "Flags는 표현의 결과는 바꿉니다. 이는 `modifiers`로도 불리는 이유입니다. 입력된 식이 문단을 별도의 줄로 처리할지, 대소문자를 구분할지, 모든 일치 항목을 찾을지를 결정하세요. flags을 배우기 위한 다음 단계로 진행하세요.",

  "steps.flagsGlobal.title": "global flag"
  "steps.flagsGlobal.description": "`global` flag causes the expression to select all matches. If not used it will only select the first match. Now enable the `global` flag to be able to select all matches.",

  "steps.flagsMultiline.title": "다중문자열 Flag",
  "steps.flagsMultiline.description": "RegEx는 모든것을 한 문장으로 봅니다. 하지만 우리는 각 문장을 보기위해 multiline` flag를 사용합니다. 이런 식으로 표현들은 각 줄마다 따로 적용됩니다. 이제 `multiline` flag 모든 매칭을 찾기위해 사용할수 있게 되었습니다.",

  "steps.flagsCaseInsensitive.title": "대소문자 비구분 Flag",
  "steps.flagsCaseInsensitive.description": "우리가 쓴 표현의 대/소문자를 구분하지 않으려면 대/소문자를 구분하지 않는 flag를 활성화해야 합니다.",
  
  "steps.greedyMatching.title": "greedy 매칭",
  "steps.greedyMatching.description": "RegEx 는 기본적으로 greedy 매칭이 아닙니다. 이는 매칭을 가능한만큼 한다는 것을 의미합니다. 아래 예시를 보면, 이것은 `r`로 끝나는 모든 문자와 매칭하므로 그 앞에 있는 모든 단어들이 가능하다는 뜻입니다. 그러나 이는 첫 글자 'r'로 끝나지 않습니다.",

  "steps.lazyMatching.title": "Lazy 매칭",
  "steps.lazyMatching.description": "Lazy 매칭은 greedy과 다르게 처음 매칭에서 종료합니다. 예를 들어, 아래 예시에서 문자 'r'로 끝나고 문자 뒤에 오는 첫 번째 일치를 찾으려면 '*' 뒤에 '?'를 추가하여야 합니다. 이는 매치가 `r`앞에서 멈춘다는 것을 의미합니다.",

  "steps.completeAllSteps.title": "축하합니다. 모든 단계를 완료하셨습니다.",
  "steps.completeAllSteps.description": "원할 때마다 이전 단계로 돌아갈 수 있으며, 통과한 모든 단계를 쉽게 탐색할 수 있습니다."
}

