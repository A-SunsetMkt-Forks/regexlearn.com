{
  "lesson.regexForSeo.starter.title": "Regex for SEO",
  "lesson.regexForSeo.starter.description": "Regex is a set of regular expressions that is frequently used in many fields, especially by those who want to increase their productivity. The advantages of using Regex for SEO are that it makes it easier to analyze big data and write richer filters. If you are new to Regex, we recommend starting with the `Regex 101` tutorial. Start by typing `OK` in the Regex field to proceed to the first step and access more detailed explanations.",

  "lesson.regexForSeo.usage.title": "Use Cases",
  "lesson.regexForSeo.usage.description": "Fields you can use Regex for SEO: Platforms like `Google Analytics`, `Google Data Studio`, `Google Sheets`, `Google Search Console`, `Ahrefs`, `Deepcrawl` and `Screaming Frog`. It is also frequently used in `.htaccess` and `robots.txt` files. Here is an example regex that will select only texts that start with `Google` in the list.",

  "lesson.regexForSeo.basics.title": "Basics",
  "lesson.regexForSeo.basics.description": "Let's take a look at some Regex basics that you will use frequently. We recommend you review the Regex 101 tutorial to learn more about them. Type `Yes` to get started.",

  "lesson.regexForSeo.or.title": "Or Operator `|`",
  "lesson.regexForSeo.or.description": "We use the Or operator `|` to filter out multiple expressions. For example, to filter text that contains both `seo` and `regex`, the Or operator separates both words with `|` write again.",

  "lesson.regexForSeo.optional.title": "Optional Operator `?`",
  "lesson.regexForSeo.optional.description": "We use it to express that an expression or character is optional. For example, we want to filter text that contains both `http` and `https`. We can use the Or operator `|` for this operation, but there is a better way for these two almost identical words. In this example, the letter `s` is optional. Add a question mark after the letter `s`.",

  "lesson.regexForSeo.any.title": "Anything `.*`",
  "lesson.regexForSeo.any.description": "In regex, period `.` can match anything, including spaces. But this match is only for a single character where it is used. Asterisk `*` indicates that the given element does not exist at all or in the text means that it occurs more than once. When used together, it means that there can be an element of unlimited length where it is used. Below are various keywords. To write the expression that starts with how to write and matches everything after it, `.*` at the end of the regex add.",

  "lesson.regexForSeo.contains.title": "Contains",
  "lesson.regexForSeo.contains.description": "To filter text containing certain words or phrases, we write the word I'm looking for between `.*` of our two expressions that match everything. For example, type `.*buy.*` to filter what includes `buy`.",

  "lesson.regexForSeo.negated.title": "Negated Character Sets `[^abc]`",
  "lesson.regexForSeo.negated.description": "We use negated character sets `[^abc]` to express characters we don't want to contain. The characters we do not want to be included are written in square brackets with a caret at the beginning. Below is both `http` and `https`. Since `http` is used in both, it will choose `https` as well. To exclude `s`, type `[^s]` at the end of `p`.",

  "lesson.regexForSeo.caret.title": "Caret Sign `^`",
  "lesson.regexForSeo.caret.description": "Let's say we have a list of URLs and we want to find only those URLs that start with `http`. But URLs contain `http` outside of the beginning. To filter out only those that start with `http`, add a caret `^` to the beginning of the expression below.",

  "lesson.regexForSeo.dollarAndEscape.title": "Dollar Sign `$` and Escape Character `\\`",
  "lesson.regexForSeo.dollarAndEscape.description": "Again we have a list of URLs. We want to find only those URLs ending in `.htm`.\n\nSince the period `.` is a special character that matches everything, we first need to disable the period before `htm` using the escape character `\\`. This applies to all special characters.\n\nThen add a `$` sign at the end of the expression. This ensures that the text to be filtered ends with the expression written before it.",

  "lesson.regexForSeo.limitation.title": "Length Restrictions `{n}`",
  "lesson.regexForSeo.limitation.description": "We may want to filter the results by character lengths. For example, to filter URLs that are `35` characters long, type `{35}` the number you will use for the length, using curly braces at the end of the period `.`.",

  "lesson.regexForSeo.maxLimitation.title": "Length Restrictions (Maximum) `{n,m}`",
  "lesson.regexForSeo.maxLimitation.description": "To filter URLs with a maximum length of `35`, use curly braces at the end of the period `.` and type `{1,35}` the minimum and maximum number values we will use for the length.",

  "lesson.regexForSeo.minLimitation.title": "Length Restrictions (Minumum) `{n,}`",
  "lesson.regexForSeo.minLimitation.description": "To filter URLs with a minimum length of `35`, type `{35,}` at the end of the period `.` using curly braces, and the minumum value we will use for the length, ending with a comma `,`.",

  "lesson.regexForSeo.robots.title": "robots.txt",
  "lesson.regexForSeo.robots.description": "Below is an example of using regex in the `robots.txt` file. In the example, it is stated that links with the `pdf` extension should not be crawled by bots.",

  "lesson.regexForSeo.htaccess.title": ".htaccess",
  "lesson.regexForSeo.htaccess.description": "Below is an example of using regex in the `.htaccess` file. In the example, links with `php` extension are directed to their `html` versions with `301` code.",

  "lesson.regexForSeo.outro.title": "Outro",
  "lesson.regexForSeo.outro.description": "Regex knowledge is a special skill that increases your productivity on any platform that allows you to use regex. Once you start using it and improve this skill, it will help you complete many repetitive tasks faster and save time for other things. To better understand the basics of Regex, you can visit the `Regex 101` tutorial. You can use the `Playground` page to test your own expressions on your own texts."
}
