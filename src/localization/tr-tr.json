{
  "general.prevStep": "Önceki Adım",
  "general.nextStep": "Sonraki Adım",
  "general.result": "Sonuç",
  "general.regex": "Regex",
  "general.text": "Metin",
  "general.completedStarterStep": "Başlangıç - Tamamlandı.",
  "general.completedCurrentStep": "Adım {step} - Tamamlandı.",
  "general.hintQuestion": "Cevabı Göster",
  "general.startLearning": "Öğrenmeye Başla!",
  "general.comingSoon": "Yakında!",

  "landing.learn": "Öğren",
  "landing.playground": "Playground",

  "notFound.intro": "Aradığın sayfa mevcut değil.",
  "notFound.button": "Anasayfaya dön",

  "alert.site.under.development": "Bu site hala geliştirme aşamasındadır. Şu an gördüğünüz şeyler değişebilir.",

  "landing.title": "Sıfırdan ileri seviyeye, adım adım RegEx öğren.",
  "landing.description": "RegEx öğrenmek düşündüğünüzden daha kolay. RegEx'i kolayca `öğrenmek`, `pratik yapmak`, `test etmek` ve `paylaşmak` için bu aracı kullanabilirsiniz.",

  "steps.0.title": "Giriş",
  "steps.0.description": "RegEx `Regular Expression` 'in kısaltmasıdır. Metni eşleştirmeye, bulmaya ya da yönetmeye yardımcı olur. İlk adıma geçmek için Regex alanına `OK` yazarak başlayalım.",

  "steps.1.title": "Adım 1 - Nokta `.`: Herhangi Bir Karakter",
  "steps.1.description": "Nokta `.` işareti özel karakterler ve boşluklar da dahil herhangi bir karakteri seçmeyi sağlar.",

  "steps.2.title": "Adım 2 - Kaçış Karakteri `\\`: Özel Karakter Hariç Tutma",
  "steps.2.description": "Nokta `.` işaretini herhangi bir karakteri seçmek için kullanıyorsak, noktanın kendisini bulabilmek için öncesinde bir kaçış karakteri `\\` kullanmamız gerekir. Bunun için noktadan önce bir kaçış karakteri `\\` ekleyelim.",

  "steps.3.title": "Adım 3 - Sözcük Karakteri `\\w`: Harf, Sayı ve Alt Çizgi",
  "steps.3.description": "Harf, sayı ve alt çizgi karakterlerini bulmak için `\\w` ifadesi kullanılır. Metindeki sözcük karakterlerini bulmak için `\\w` ifadesini kullanalım.",

  "steps.4.title": "Adım 4 - Sözcük Karakteri Dışındakiler `\\W`",
  "steps.4.description": "Harf, sayı ve alt çizgi karakterleri dışında kalan karakterleri bulmak için `\\W` ifadesi kullanılır.",

  "steps.5.title": "Adım 5 - Sayı Karakteri  `\\d`",
  "steps.5.description": "Sadece sayı karakterlerini bulmak için `\\d` kullanılır.",

  "steps.6.title": "Adım 6 - Sayı Karakteri Dışındakiler `\\D`",
  "steps.6.description": "Sayı karakteri dışındakileri bulmak için `\\D` kullanılır.",

  "steps.7.title": "Adım 7 - Boşluk Karakteri `\\s`",
  "steps.7.description": "Sadece boşluk karakterlerini bulmak için `\\s` kullanılır.",

  "steps.8.title": "Adım 8 - Boşluk Karakteri Dışındakiler `\\S`",
  "steps.8.description": "Boşluk karakteri dışındakileri bulmak için `\\S` kullanılır.",

  "steps.9.title": "Adım 9 - Belirttiğimiz Karakterlerden Herhangi Biri `[abc]`",
  "steps.9.description": "Eğer bir sözcüğün içerdiği karakterlerden biri çeşitli karakterler olabilirse bunu köşeli parantez `[]` içerisinde tüm alternatif karakterler ile birlikte yazarız. Örneğin metindeki tüm sözcükleri bulabilecek ifadeyi yazabilmek için `a`, `e`, `i`, `o`, `u` karakterlerini bitişik olarak köşeli parantezlerin `[]` içine yazalım.",

  "steps.10.title": "Adım 10 - Belirttiğimiz Karakterlerin Dışındakiler `[^abc]`",
  "steps.10.description": "Belirttiğimiz karakterlerin dışındakileri bulmak için istemediğimiz karakterleri köşeli parantez `[]` içine şapka karakteri `^` ile başlayacak şekilde yan yana yazarız. Aşağıdaki metinde `ber` ve `bor` sözcükleri dışındaki tüm sözcükleri bulabilmek için şapka karakterinden sonra `e` ve `o` harfini yan yana yazalım.",

  "steps.11.title": "Adım 11 - Belirttiğimiz Aralıktaki Harfler `[a-z]`",
  "steps.11.description": "Belirttiğimiz aralıktaki harfleri bulmak için başlangıç harfi ve bitiş harfi aralarında bir tire `-` olacak şekilde köşeli parantezler `[]` içine yazılır. Büyük küçük harf duyarlıdır. Kendileri de dahil `e` ve `o` aralarındaki tüm küçük harfleri bulacak ifadeyi yazalım.",

  "steps.12.title": "Adım 12 - Belirttiğimiz Aralıktaki Sayılar `[0-9]`",
  "steps.12.description": "Belirttiğimiz aralıktaki sayıları bulmak için başlangıç sayısı ve bitiş sayısı aralarında bir tire `-` olacak şekilde köşeli parantezler `[]` içine yazılır. Kendileride dahil `3` ve `6` aralarındaki tüm sayıları bulacak ifadeyi yazalım.",

  "steps.13.title": "Adım 13 - Şapka İşareti `^`:\\nSatır Başlangıcına Göre Seçmek",
  "steps.13.description": "Sayıları bulmak için `\\d` ifadesini kullanıyorduk. Sadece satır başında geçen sayıları bulmak için bu ifadenin başına `^` işaretini ekleyelim.",

  "steps.14.title": "Adım 14 - Dolar İşareti `$`:\\nSatır Sonuna Göre Seçmek",
  "steps.14.description": "Sadece satır sonunda geçen `html` metinlerini bulmak için `$` işaretini `html` değerinden sonra kullanalım.",

  "steps.15.title": "Adım 15 - Soru İşareti `?`: Opsiyonel",
  "steps.15.description": "Bir karakterin opsiyonel olduğunu ifade etmek için sonuna `?` soru işareti koyarız. Örneğin aşağıdaki `u` harfinin opsiyonel olduğunu belirtelim.",

  "steps.16.title": "Adım 16 - Artı İşareti `+`:\\nKarekterin Bir ya da Daha Fazla Eşleşmesine Göre",
  "steps.16.description": "Bir karakterin bir ya da daha fazla geçebileceğini ifade etmek için sonuna `+` artı işareti koyarız. Örneğin metinde `e` harfinin bir ya da yan yana daha fazla geçebileceğini belirtelim.",

  "steps.17.title": "Adım 17 - Yıldız İşareti `*`:\\nKarakterin Hiç Eşleşmemesi ya da Çok Sayıda Eşleşmesine Göre",
  "steps.17.description": "Bir karakterin hiç eşleşmemesini ya da çok sayıda eşleşebileceğini ifade etmek için sonuna `*` yıldız işareti koyarız. Örneğin metinde `e` harfinin hiç geçmeyeceğini ya da yan yana bir ya da daha fazla geçebileceğini belirtelim.",

  "steps.18.title": "Adım 18 - Karakterin Belirli Bir Sayıda\\nEşleşmesine Göre `{1}`",
  "steps.18.description": "Bir karakterin belirli bir sayıda geçmesini ifade etmek için sonuna kaç kere geçmesini istediğimizle birlikte süslü parantezleri `{n}` yazarız. Örneğin aşağıdaki `e` harfinin sadece `2` kere geçebileceğini belirtelim.",

  "steps.19.title": "Adım 19 - Karakterin En Az Belirli Bir Sayıda\\nEşleşmesine Göre `{1,}`",
  "steps.19.description": "Bir karakterin en az belirli bir sayıda geçmesini ifade etmek için sonuna en az kaç kere geçmesini istediğimizi sonuna virgül `,` ile birlikte süslü parantezlerin `{n, }` içine yazarız. Örneğin aşağıdaki `e` harfinin en az `3` kez geçebileceğini belirtelim.",

  "steps.20.title": "Adım 20 - Karakterin Belirli Bir Sayı Aralığında\\nEşleşmesine Göre `{1,9}`",
  "steps.20.description": "Bir karakterin belirli bir sayı aralığında geçmesini ifade etmek için sonuna geçmesini istediğimiz aralıkla birlikte süslü parantezleri `{x,y}` yazarız. Örneğin aşağıdaki `e` harfinin sadece `1` ile `3` arasında geçebileceğini belirtelim.",

  "steps.21.title": "Adım 21 - Boru Karakteri `|`:\\nAlternatif Karakterlere Göre Seçmek `(a|b|c)`",
  "steps.21.description": "Bir karakterin farklı karakterler olabileceğini belirmeyi sağlar. Böylece olabilecek tüm karakterler parantez içerisinde `|` işareti ile birbirinden ayrılarak yazılır. Örneğin aşağıdaki `e` harfinin `a` harfide olabileceğini belirtelim.",

  "steps.22.title": "Adım 22 - Parantezler `( )`: Gruplama",
  "steps.22.description": "Bir ifadeyi gruplayabilir ve bu gruplari referans göstermek ya da bazı kurallar uygulamak için kullanabiliriz. Bir ifadeyi gruplamak için `()` parantez içine alırız. Şimdilik sadece aşağıdaki `and` kelimesini gruplayalım.",

  "steps.23.title": "Adım 23 - Bir Gruba Referans Göstermek",
  "steps.23.description": "Tekrar eden ifadelerde aynı şeyi tekrar yazmamak için daha önce yaptığımız bir ifade grubuna referans gösterebiliriz. Örneğin bu örnekte `444` değeri `(\\d{3})` ifadesi olarak ve `0` değeri `(\\d)` ifadesi olarak gruplandırılmıştır. İlk tanımladığımız bu gruba referans göstermek için `\\1` yazarız. Bu tanımlanan birinci grup anlamına gelir. İfademizin sonuna tekrar `(\\d{3})` yazmamak için bu grubu `\\1` yazarak referans gösterelim.",

  "steps.24.title": "Adım 24 - Bayraklar `global`",
  "steps.24.description": "Bayraklar yazdığımız ifadenin hangi kurallara göre uygulanacağını belirler. Örneğin büyük küçük harf duyarlı olacak mı? Tek bir eşleşme mi bulacak yoksa tümünü mü? Ya da sadece ilk satırda mı çalışacak tüm satırlarda mı? gibi. Önceki adımlarda bu bayraklar hep hazır seçili geldi. Şimdi tüm eşleşmeleri bulabilmek için `global` bayrağını aktif edelim.",

  "steps.25.title": "Adım 25 - Bayraklar `multiline`",
  "steps.25.description": "RegEx tüm metni tek satır olarak görür. Fakat her satırı ayrı ayrı ele alabilmek için `multiline` bayrağını kullanırız. Bu sayede satır sonuna göre yazdığımız ifadeler her satır için ayrı ayrı çalışır. Şimdi tüm eşleşmeleri bulabilmek için `multiline` bayrağını aktif edelim.",

  "steps.26.title": "Adım 26 - Bayraklar `case-insensitive`",
  "steps.26.description": "Yazdığımız ifadenin büyük küçük harf duyarlılığını kaldırmak için `case-insensitive` bayrağını aktif etmeliyiz. Deneyelim."
}
